#!/usr/bin/env python

"""
Makes a hostfile (nodefile) for MPI to use while running
slice2series. The script reads the nodefile generated by
PBS itself (i.e. after PBS assigns the job the requested
number of nodes) and modifies it to generate a new nodes
file.

"""

import sys, argparse

def get_unique_nodes(innodes):
    seen = set()
    return [ x.strip() for x in innodes if not (x in seen or seen.add(x))]

def write_nodes_file(nodes, slots, outfile):
    print("Unique nodes are: {0}".format(nodes))
    ofile   = open(outfile, "w")
    for node in nodes:
        ofile.write("{0} slots={1} max_slots={1}\n".format(node, slots))
    ofile.close()
    print("New nodes file written: {0}".format(outfile))

def process_nodesfile(args):
    uniq_nodes = get_unique_nodes(open(args.file).readlines())    
    outfile    = args.file if (args.o is None) else args.o
    write_nodes_file(uniq_nodes, args.s, outfile)
        
def process_nodes(args):
    write_nodes_file(get_unique_nodes(args.nodes), args.s, args.o)
    
    
if __name__ == "__main__":
    parser     = argparse.ArgumentParser(prog="{0}".format(__file__))
    subparsers = parser.add_subparsers(help='help for subcommand')
    parser_a   = subparsers.add_parser('nodes', help='Specify nodes on the command line')
    parser_a.add_argument('nodes', nargs='+', type=str, help="List of nodes")
    parser_a.add_argument('-s',    type=int, help="Number of (MPI) slots per node", required=True)
    parser_a.add_argument('-o',    type=str, help='Output node file', required=True)
    parser_a.set_defaults(func=process_nodes)

    parser_b   = subparsers.add_parser('file', help='Specify nodes using an input file')
    parser_b.add_argument('file',  type=str, help='Input nodes file')
    parser_b.add_argument('-s',    type=int, help="Number of (MPI) slots per node", required=True)
    parser_b.add_argument('-o',    type=str, help='Output node file. Default: Overwrite input file')
    parser_b.set_defaults(func=process_nodesfile)

    args = parser.parse_args()
    args.func(args)
